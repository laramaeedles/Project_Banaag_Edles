#include "Project.h"
#include <iostream>
#include <stdint.h>
#include <string>
#include <cstdlib>
#include <cmath>
#include <sstream>
#include <vector>
#include <algorithm>
#include <fstream>
#define limit 20
#define MAX 200000
#define LL	long long
#define LIMIT	1000
vector <int> primes;
bool composite [MAX+1];

#include <cstdio>
#define sz 1000001
#define mx 1001

using namespace std;

Project::Project()
{
    //ctor
}

Project::~Project()
{
    //dtor
}

bool Project::isPrime(int num)
{
    if(num == 0)
        return true;
    if(num == 1)
        return false;
    num = abs(num);
    for(int i = 2; i <= sqrt(num); i++)
    {
        if(num % i == 0)
            return false;
    }
    return true;
}

int Project::countFactors(int f)
{
    int factors = 0;

	for (int i = 1; i <= (sqrt(f)); i++)
	{
		if (f % i == 0)
			factors += 2;
	}

	return factors;
}

void Project::seive(int n)
{
	int	i, j;
	for (i = 2; i * i <= n; i++)
	{
		if (composite[i])
			continue;
		for (j = 2 * i; j <= n; j += i)
			composite[j] = 1;
		primes.push_back(i);
	}
	for (; i <= n; i++)
		if (!composite[i])
			primes.push_back(i);
}

int Project::sumDigits(string s)
 {
    int answer = 0;
    for(unsigned int i = 0; i < s.length(); i++)
        answer += atoi(s.substr(i,1).c_str());
    return answer;
}

int Project::getScore(string s)
{
    int score = 0;
    for(unsigned int i = 0; i < s.length(); i++)
        score += (((int) s.at(i)) - 64);
    return score;
}

void Project::multiples_of_3_and_5() //problem 1
{
    int sum=0,i;
    for (i=0;i<1000;i++)
    {
        if (i%3==0 || i%5==0)
            sum=i+sum;
    }
    cout<<"\nSum of All Multiples of 3 and 5 below 1000 is: "<<sum<<endl;
}

void Project::even_fibonacce() //problem 2
{
    int i=0, temp1=0, temp2=1, temp=0, sum=0, n=4000000;

    for (i=0;temp<n;i++)
    {
        temp=temp1+temp2;
        temp1=temp2;
        temp2=temp;
        if (temp>n)
            break;
        if (temp%2==0)
            sum+=temp;
    }
    cout<<"\nThe sum of all even fibonacci numbers is: "<<sum<<endl;
}

void Project::largest_prime_factor() //problem 3
{
    long long int i=0, num=600851475143, primetest=0, temp=0, largest=0, check=1;
    for (i = 1; i <= num; i++)
    {
        if (num % i == 0)
        {
            temp = 0;
            for (primetest=2; temp == 0 && i > primetest ; primetest++)
            {
                if (i % primetest == 0)
                temp++;
            }
            if (temp == 0)
                largest = i;
            check*=largest;
            if (check==num)
            {
                cout<<"\nThe largest prime factor is: "<<largest<<endl;
                break;
            }
        }
    }
}

void Project::largest_palindrome() //problem 4
{
    int answer = 0;
    for(unsigned int i = 999; i != 99; i--)
    for(unsigned int j = 999; j != 99; j--) {
    int product = i*j;
    stringstream mystr2;
    mystr2 << product;
    string mystr = mystr2.str();
    unsigned int length = mystr.length();
    bool check = true;

    for(unsigned int k = 0; k < length/2; k++)
        if(mystr[k] != mystr[(length-k)-1]) {
            check = false;
            break;
        }
    if(answer <= product && check)
        answer = product;
    }
    cout << "\nThe largest palindrome product is: "<< answer << endl;
}

void Project::smallest_multiple() //problem 5
{
    int n=1;
    while(n%2!=0||n%3!=0||n%4!=0||
    n%5!=0||n%6!=0||n%7!=0||
    n%8!=0||n%9!=0||n%10!=0||
    n%11!=0||n%12!=0||n%13!=0||
    n%14!=0||n%15!=0||n%16!=0||
    n%17!=0||n%18!=0||n%19!=0||n%20!=0)
    {
        n++;
    }
    cout<<"\nThe smallest multiple is: "<<n<<endl;
}

void Project::sum_square_diff() //problem 6
{
    int i=0, sum1=0, sum2=0, temp=0, diff=0, n=100;

    for (i=0;i<=n;i++)
    {
        temp+=i;
        sum1+=(i*i);
        sum2=(temp*temp);
    }
    diff=sum2-sum1;
    cout<<"\nThe sum square difference is: "<<diff<<endl;
}

void Project::_10001st_prime() //problem 7
{
    int div =0, n=0, i=1;
    while(n<10001)
    {
        if(isPrime(i))
        {
            div = i;
            n++;
        }
        i++;
    }
    cout<<"\nThe 10001st prime number is: "<<div<<endl;
}

void Project::largest_product_in_series() //problem 8
{
    int product=0,n=0,prod=0,b=0,a=0,c=0,d=0,e=0;
    string number = "73167176531330624919225119674426574742355349194934"
    "96983520312774506326239578318016984801869478851843"
    "85861560789112949495459501737958331952853208805511"
    "12540698747158523863050715693290963295227443043557"
    "66896648950445244523161731856403098711121722383113"
    "62229893423380308135336276614282806444486645238749"
    "30358907296290491560440772390713810515859307960866"
    "70172427121883998797908792274921901699720888093776"
    "65727333001053367881220235421809751254540594752243"
    "52584907711670556013604839586446706324415722155397"
    "53697817977846174064955149290862569321978468622482"
    "83972241375657056057490261407972968652414535100474"
    "82166370484403199890008895243450658541227588666881"
    "16427171479924442928230863465674813919123162824586"
    "17866458359124566529476545682848912883142607690042"
    "24219022671055626321111109370544217506941658960408"
    "07198403850962455444362981230987879927244284909188"
    "84580156166097919133875499200524063689912560717606"
    "05886116467109405077541002256983155200055935729725"
    "71636269561882670428252483600823257530420752963450";
    while(n < 995 )
    {
        a=number[n];
        a=a-48;
        b=number[n+1];
        b=b-48;
        c=number[n+2];
        c=c-48;
        d=number[n+3];
        d=d-48;
        e=number[n+4];
        e=e-48;
        prod =a*b*c*d*e;
        if(prod>product)
        {
            product = prod;
        }
        n++;
    }
    cout<<"\nThe largest product in a series is: "<<product<<endl;
}

void Project::special_pytho_triplet() //problem 9
{
    int a = 0, b = 0, c = 0, sum = 1000, product;
     bool test = false;
     for (a = 1; a < sum / 3 && !test; a++)
     {
         for (b = a; b < sum / 2 && !test; b++)
         {
             c = sum - a - b;

             if ((a*a) + (b*b) == (c*c) )
             {
                 test = true;
                 product=a*b*c;
                 cout<<"\nThe product of the Special Pythagorean Triplet is: "<<product<<endl;
                 break;
             }
         }
     }
}

void Project::summation_of_primes() //problem 10
{
    int i= 0, n = 2000000;
    uintmax_t sum=0;
    while(i<n)
    {
        if(isPrime(i))
        {
            sum = sum + i;
        }
        i++;
    }
    cout<<"The summation of primes is: "<<sum<<endl;
}

void Project::largest_product_grid() //problem 11
{
    int n,m,productd=0, producth=0, productv=0, products=0, temp=0;
    int num[20][20] = {{ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8},
                        {49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0},
                        {81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65},
                        {52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91},
                        {22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},
                        {24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50},
                        {32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},
                        {67,26,20,68,02,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21},
                        {24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},
                        {21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95},
                        {78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92},
                        {16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57},
                        {86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58},
                        {19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40},
                        { 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66},
                        {88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69},
                        { 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36},
                        {20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16},
                        {20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54},
                        { 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48}};

    for(m=0;m<17;m++)
    {
        for(n=0;n<17;n++)
        {
                productd=(num[n][m]*num[n+1][m+1]*num[n+2][m+2]*num[n+3][m+3]);
                products=(num[n+3][m]*num[n+2][m+1]*num[n+1][m+2]*num[n][m+3]);
                producth=(num[n][m]*num[n][m+1]*num[n][m+2]*num[n][m+3]);
                productv=(num[n][m]*num[n+1][m]*num[n+2][m]*num[n+3][m]);


            if(productd>=temp)
                temp = productd;
            if(producth>=temp)
                temp = producth;
            if(products>=temp)
                temp = products;
            if(productv>=temp)
                temp = productv;
        }
    }
    cout<<"\nThe Largest Product in the Grid is: "<<temp<<endl;
}

void Project::divisible_triangular_number() //problem 12
{
	int iter = 1;
	int size = 1,x=0;
	int NumFactors = 0;

    while (NumFactors <= 500)
	{
		NumFactors = countFactors(size);
		iter++;
		size += iter;
	}

		x=size-iter;
		cout<<"\nHighly Divisibe Triangular Number is: "<<x<<endl;
}

void Project::largest_sum() //problem 13
{
    long long num = 0;
    long long carry[50] = {0},answer[50] = {0};
    int row = 49,column = 49;

    int digits[100][50] = {
    {  3, 7 ,1, 0, 7, 2, 8, 7, 5, 3, 3, 9, 0, 2, 1, 0, 2, 7, 9, 8, 7, 9, 7, 9, 9, 8, 2, 2, 0, 8, 3, 7, 5, 9, 0, 2, 4, 6, 5, 1, 0, 1, 3, 5, 7, 4, 0, 2, 5, 0} ,
    {  4, 6, 3, 7, 6, 9, 3, 7, 6, 7, 7, 4, 9, 0, 0, 0, 9, 7, 1, 2, 6, 4, 8, 1, 2, 4, 8, 9, 6, 9, 7, 0, 0, 7, 8, 0, 5, 0, 4, 1, 7, 0, 1, 8, 2, 6, 0, 5, 3, 8}  ,
    {  7, 4, 3, 2, 4, 9, 8, 6, 1, 9, 9, 5, 2, 4, 7, 4, 1, 0, 5, 9, 4, 7, 4, 2, 3, 3, 3, 0, 9, 5, 1, 3, 0, 5, 8, 1, 2, 3, 7, 2, 6, 6, 1, 7, 3, 0, 9, 6, 2, 9}  ,
    {  9, 1, 9, 4, 2, 2, 1, 3, 3, 6, 3, 5, 7, 4, 1, 6, 1, 5, 7, 2, 5, 2, 2, 4, 3, 0, 5, 6, 3, 3, 0, 1, 8, 1, 1, 0, 7, 2, 4, 0, 6, 1, 5, 4, 9, 0, 8, 2, 5, 0}  ,
    {  2, 3, 0, 6, 7, 5, 8, 8, 2, 0, 7, 5, 3, 9, 3, 4, 6, 1, 7, 1, 1, 7, 1, 9, 8, 0, 3, 1, 0, 4, 2, 1, 0, 4, 7, 5, 1, 3, 7, 7, 8, 0, 6, 3, 2, 4, 6, 6, 7, 6}  ,
    {  8, 9, 2, 6, 1, 6, 7, 0, 6, 9, 6, 6, 2, 3, 6, 3, 3, 8, 2, 0, 1, 3, 6, 3, 7, 8, 4, 1, 8, 3, 8, 3, 6, 8, 4, 1, 7, 8, 7, 3, 4, 3, 6, 1, 7, 2, 6, 7, 5, 7}  ,
    {  2, 8, 1, 1, 2, 8, 7, 9, 8, 1, 2, 8, 4, 9, 9, 7, 9, 4, 0, 8, 0, 6, 5, 4, 8, 1, 9, 3, 1, 5, 9, 2, 6, 2, 1, 6, 9, 1, 2, 7, 5, 8, 8, 9, 8, 3, 2, 7, 3, 8}  ,
    {  4, 4, 2, 7, 4, 2, 2, 8, 9, 1, 7, 4, 3, 2, 5, 2, 0, 3, 2, 1, 9, 2, 3, 5, 8, 9, 4, 2, 2, 8, 7, 6, 7, 9, 6, 4, 8, 7, 6, 7, 0, 2, 7, 2, 1, 8, 9, 3, 1, 8}  ,
    {  4, 7, 4, 5, 1, 4, 4, 5, 7, 3, 6, 0, 0, 1, 3, 0, 6, 4, 3, 9, 0, 9, 1, 1, 6, 7, 2, 1, 6, 8, 5, 6, 8, 4, 4, 5, 8, 8, 7, 1, 1, 6, 0, 3, 1, 5, 3, 2, 7, 6}  ,
    {  7, 0, 3, 8, 6, 4, 8, 6, 1, 0, 5, 8, 4, 3, 0, 2, 5, 4, 3, 9, 9, 3, 9, 6, 1, 9, 8, 2, 8, 9, 1, 7, 5, 9, 3, 6, 6, 5, 6, 8, 6, 7, 5, 7, 9, 3, 4, 9, 5, 1}  ,
    {  6, 2, 1, 7, 6, 4, 5, 7, 1, 4, 1, 8, 5, 6, 5, 6, 0, 6, 2, 9, 5, 0, 2, 1, 5, 7, 2, 2, 3, 1, 9, 6, 5, 8, 6, 7, 5, 5, 0, 7, 9, 3, 2, 4, 1, 9, 3, 3, 3, 1}  ,
    {  6, 4, 9, 0, 6, 3, 5, 2, 4, 6, 2, 7, 4, 1, 9, 0, 4, 9, 2, 9, 1, 0, 1, 4, 3, 2, 4, 4, 5, 8, 1, 3, 8, 2, 2, 6, 6, 3, 3, 4, 7, 9, 4, 4, 7, 5, 8, 1, 7, 8}  ,
    {  9, 2, 5, 7, 5, 8, 6, 7, 7, 1, 8, 3, 3, 7, 2, 1, 7, 6, 6, 1, 9, 6, 3, 7, 5, 1, 5, 9, 0, 5, 7, 9, 2, 3, 9, 7, 2, 8, 2, 4, 5, 5, 9, 8, 8, 3, 8, 4, 0, 7}  ,
    {  5, 8, 2, 0, 3, 5, 6, 5, 3, 2, 5, 3, 5, 9, 3, 9, 9, 0, 0, 8, 4, 0, 2, 6, 3, 3, 5, 6, 8, 9, 4, 8, 8, 3, 0, 1, 8, 9, 4, 5, 8, 6, 2, 8, 2, 2, 7, 8, 2, 8}  ,
    {  8, 0, 1, 8, 1, 1, 9, 9, 3, 8, 4, 8, 2, 6, 2, 8, 2, 0, 1, 4, 2, 7, 8, 1, 9, 4, 1, 3, 9, 9, 4, 0, 5, 6, 7, 5, 8, 7, 1, 5, 1, 1, 7, 0, 0, 9, 4, 3, 9, 0}  ,
    {  3, 5, 3, 9, 8, 6, 6, 4, 3, 7, 2, 8, 2, 7, 1, 1, 2, 6, 5, 3, 8, 2, 9, 9, 8, 7, 2, 4, 0, 7, 8, 4, 4, 7, 3, 0, 5, 3, 1, 9, 0, 1, 0, 4, 2, 9, 3, 5, 8, 6}  ,
    {  8, 6, 5, 1, 5, 5, 0, 6, 0, 0, 6, 2, 9, 5, 8, 6, 4, 8, 6, 1, 5, 3, 2, 0, 7, 5, 2, 7, 3, 3, 7, 1, 9, 5, 9, 1, 9, 1, 4, 2, 0, 5, 1, 7, 2, 5, 5, 8, 2, 9}  ,
    {  7, 1, 6, 9, 3, 8, 8, 8, 7, 0, 7, 7, 1, 5, 4, 6, 6, 4, 9, 9, 1, 1, 5, 5, 9, 3, 4, 8, 7, 6, 0, 3, 5, 3, 2, 9, 2, 1, 7, 1, 4, 9, 7, 0, 0, 5, 6, 9, 3, 8}  ,
    {  5, 4, 3, 7, 0, 0, 7, 0, 5, 7, 6, 8, 2, 6, 6, 8, 4, 6, 2, 4, 6, 2, 1, 4, 9, 5, 6, 5, 0, 0, 7, 6, 4, 7, 1, 7, 8, 7, 2, 9, 4, 4, 3, 8, 3, 7, 7, 6, 0, 4}  ,
    {  5, 3, 2, 8, 2, 6, 5, 4, 1, 0, 8, 7, 5, 6, 8, 2, 8, 4, 4, 3, 1, 9, 1, 1, 9, 0, 6, 3, 4, 6, 9, 4, 0, 3, 7, 8, 5, 5, 2, 1, 7, 7, 7, 9, 2, 9, 5, 1, 4, 5}  ,
    {  3, 6, 1, 2, 3, 2, 7, 2, 5, 2, 5, 0, 0, 0, 2, 9, 6, 0, 7, 1, 0, 7, 5, 0, 8, 2, 5, 6, 3, 8, 1, 5, 6, 5, 6, 7, 1, 0, 8, 8, 5, 2, 5, 8, 3, 5, 0, 7, 2, 1}  ,
    {  4, 5, 8, 7, 6, 5, 7, 6, 1, 7, 2, 4, 1, 0, 9, 7, 6, 4, 4, 7, 3, 3, 9, 1, 1, 0, 6, 0, 7, 2, 1, 8, 2, 6, 5, 2, 3, 6, 8, 7, 7, 2, 2, 3, 6, 3, 6, 0, 4, 5}  ,
    {  1, 7, 4, 2, 3, 7, 0, 6, 9, 0, 5, 8, 5, 1, 8, 6, 0, 6, 6, 0, 4, 4, 8, 2, 0, 7, 6, 2, 1, 2, 0, 9, 8, 1, 3, 2, 8, 7, 8, 6, 0, 7, 3, 3, 9, 6, 9, 4, 1, 2}  ,
    {  8, 1, 1, 4, 2, 6, 6, 0, 4, 1, 8, 0, 8, 6, 8, 3, 0, 6, 1, 9, 3, 2, 8, 4, 6, 0, 8, 1, 1, 1, 9, 1, 0, 6, 1, 5, 5, 6, 9, 4, 0, 5, 1, 2, 6, 8, 9, 6, 9, 2}  ,
    {  5, 1, 9, 3, 4, 3, 2, 5, 4, 5, 1, 7, 2, 8, 3, 8, 8, 6, 4, 1, 9, 1, 8, 0, 4, 7, 0, 4, 9, 2, 9, 3, 2, 1, 5, 0, 5, 8, 6, 4, 2, 5, 6, 3, 0, 4, 9, 4, 8, 3}  ,
    {  6, 2, 4, 6, 7, 2, 2, 1, 6, 4, 8, 4, 3, 5, 0, 7, 6, 2, 0, 1, 7, 2, 7, 9, 1, 8, 0, 3, 9, 9, 4, 4, 6, 9, 3, 0, 0, 4, 7, 3, 2, 9, 5, 6, 3, 4, 0, 6, 9, 1}  ,
    {  1, 5, 7, 3, 2, 4, 4, 4, 3, 8, 6, 9, 0, 8, 1, 2, 5, 7, 9, 4, 5, 1, 4, 0, 8, 9, 0, 5, 7, 7, 0, 6, 2, 2, 9, 4, 2, 9, 1, 9, 7, 1, 0, 7, 9, 2, 8, 2, 0, 9}  ,
    {  5, 5, 0, 3, 7, 6, 8, 7, 5, 2, 5, 6, 7, 8, 7, 7, 3, 0, 9, 1, 8, 6, 2, 5, 4, 0, 7, 4, 4, 9, 6, 9, 8, 4, 4, 5, 0, 8, 3, 3, 0, 3, 9, 3, 6, 8, 2, 1, 2, 6}  ,
    {  1, 8, 3, 3, 6, 3, 8, 4, 8, 2, 5, 3, 3, 0, 1, 5, 4, 6, 8, 6, 1, 9, 6, 1, 2, 4, 3, 4, 8, 7, 6, 7, 6, 8, 1, 2, 9, 7, 5, 3, 4, 3, 7, 5, 9, 4, 6, 5, 1, 5}  ,
    {  8, 0, 3, 8, 6, 2, 8, 7, 5, 9, 2, 8, 7, 8, 4, 9, 0, 2, 0, 1, 5, 2, 1, 6, 8, 5, 5, 5, 4, 8, 2, 8, 7, 1, 7, 2, 0, 1, 2, 1, 9, 2, 5, 7, 7, 6, 6, 9, 5, 4}  ,
    {  7, 8, 1, 8, 2, 8, 3, 3, 7, 5, 7, 9, 9, 3, 1, 0, 3, 6, 1, 4, 7, 4, 0, 3, 5, 6, 8, 5, 6, 4, 4, 9, 0, 9, 5, 5, 2, 7, 0, 9, 7, 8, 6, 4, 7, 9, 7, 5, 8, 1}  ,
    {  1, 6, 7, 2, 6, 3, 2, 0, 1, 0, 0, 4, 3, 6, 8, 9, 7, 8, 4, 2, 5, 5, 3, 5, 3, 9, 9, 2, 0, 9, 3, 1, 8, 3, 7, 4, 4, 1, 4, 9, 7, 8, 0, 6, 8, 6, 0, 9, 8, 4}  ,
    {  4, 8, 4, 0, 3, 0, 9, 8, 1, 2, 9, 0, 7, 7, 7, 9, 1, 7, 9, 9, 0, 8, 8, 2, 1, 8, 7, 9, 5, 3, 2, 7, 3, 6, 4, 4, 7, 5, 6, 7, 5, 5, 9, 0, 8, 4, 8, 0, 3, 0}  ,
    {  8, 7, 0, 8, 6, 9, 8, 7, 5, 5, 1, 3, 9, 2, 7, 1, 1, 8, 5, 4, 5, 1, 7, 0, 7, 8, 5, 4, 4, 1, 6, 1, 8, 5, 2, 4, 2, 4, 3, 2, 0, 6, 9, 3, 1, 5, 0, 3, 3, 2}  ,
    {  5, 9, 9, 5, 9, 4, 0, 6, 8, 9, 5, 7, 5, 6, 5, 3, 6, 7, 8, 2, 1, 0, 7, 0, 7, 4, 9, 2, 6, 9, 6, 6, 5, 3, 7, 6, 7, 6, 3, 2, 6, 2, 3, 5, 4, 4, 7, 2, 1, 0}  ,
    {  6, 9, 7, 9, 3, 9, 5, 0, 6, 7, 9, 6, 5, 2, 6, 9, 4, 7, 4, 2, 5, 9, 7, 7, 0, 9, 7, 3, 9, 1, 6, 6, 6, 9, 3, 7, 6, 3, 0, 4, 2, 6, 3, 3, 9, 8, 7, 0, 8, 5}  ,
    {  4, 1, 0, 5, 2, 6, 8, 4, 7, 0, 8, 2, 9, 9, 0, 8, 5, 2, 1, 1, 3, 9, 9, 4, 2, 7, 3, 6, 5, 7, 3, 4, 1, 1, 6, 1, 8, 2, 7, 6, 0, 3, 1, 5, 0, 0, 1, 2, 7, 1}  ,
    {  6, 5, 3, 7, 8, 6, 0, 7, 3, 6, 1, 5, 0, 1, 0, 8, 0, 8, 5, 7, 0, 0, 9, 1, 4, 9, 9, 3, 9, 5, 1, 2, 5, 5, 7, 0, 2, 8, 1, 9, 8, 7, 4, 6, 0, 0, 4, 3, 7, 5}  ,
    {  3, 5, 8, 2, 9, 0, 3, 5, 3, 1, 7, 4, 3, 4, 7, 1, 7, 3, 2, 6, 9, 3, 2, 1, 2, 3, 5, 7, 8, 1, 5, 4, 9, 8, 2, 6, 2, 9, 7, 4, 2, 5, 5, 2, 7, 3, 7, 3, 0, 7}  ,
    {  9, 4, 9, 5, 3, 7, 5, 9, 7, 6, 5, 1, 0, 5, 3, 0, 5, 9, 4, 6, 9, 6, 6, 0, 6, 7, 6, 8, 3, 1, 5, 6, 5, 7, 4, 3, 7, 7, 1, 6, 7, 4, 0, 1, 8, 7, 5, 2, 7, 5}  ,
    {  8, 8, 9, 0, 2, 8, 0, 2, 5, 7, 1, 7, 3, 3, 2, 2, 9, 6, 1, 9, 1, 7, 6, 6, 6, 8, 7, 1, 3, 8, 1, 9, 9, 3, 1, 8, 1, 1, 0, 4, 8, 7, 7, 0, 1, 9, 0, 2, 7, 1}  ,
    {  2, 5, 2, 6, 7, 6, 8, 0, 2, 7, 6, 0, 7, 8, 0, 0, 3, 0, 1, 3, 6, 7, 8, 6, 8, 0, 9, 9, 2, 5, 2, 5, 4, 6, 3, 4, 0, 1, 0, 6, 1, 6, 3, 2, 8, 6, 6, 5, 2, 6}  ,
    {  3, 6, 2, 7, 0, 2, 1, 8, 5, 4, 0, 4, 9, 7, 7, 0, 5, 5, 8, 5, 6, 2, 9, 9, 4, 6, 5, 8, 0, 6, 3, 6, 2, 3, 7, 9, 9, 3, 1, 4, 0, 7, 4, 6, 2, 5, 5, 9, 6, 2}  ,
    {  2, 4, 0, 7, 4, 4, 8, 6, 9, 0, 8, 2, 3, 1, 1, 7, 4, 9, 7, 7, 7, 9, 2, 3, 6, 5, 4, 6, 6, 2, 5, 7, 2, 4, 6, 9, 2, 3, 3, 2, 2, 8, 1, 0, 9, 1, 7, 1, 4, 1}  ,
    {  9, 1, 4, 3, 0, 2, 8, 8, 1, 9, 7, 1, 0, 3, 2, 8, 8, 5, 9, 7, 8, 0, 6, 6, 6, 9, 7, 6, 0, 8, 9, 2, 9, 3, 8, 6, 3, 8, 2, 8, 5, 0, 2, 5, 3, 3, 3, 4, 0, 3}  ,
    {  3, 4, 4, 1, 3, 0, 6, 5, 5, 7, 8, 0, 1, 6, 1, 2, 7, 8, 1, 5, 9, 2, 1, 8, 1, 5, 0, 0, 5, 5, 6, 1, 8, 6, 8, 8, 3, 6, 4, 6, 8, 4, 2, 0, 0, 9, 0, 4, 7, 0}  ,
    {  2, 3, 0, 5, 3, 0, 8, 1, 1, 7, 2, 8, 1, 6, 4, 3, 0, 4, 8, 7, 6, 2, 3, 7, 9, 1, 9, 6, 9, 8, 4, 2, 4, 8, 7, 2, 5, 5, 0, 3, 6, 6, 3, 8, 7, 8, 4, 5, 8, 3}  ,
    {  1, 1, 4, 8, 7, 6, 9, 6, 9, 3, 2, 1, 5, 4, 9, 0, 2, 8, 1, 0, 4, 2, 4, 0, 2, 0, 1, 3, 8, 3, 3, 5, 1, 2, 4, 4, 6, 2, 1, 8, 1, 4, 4, 1, 7, 7, 3, 4, 7, 0}  ,
    {  6, 3, 7, 8, 3, 2, 9, 9, 4, 9, 0, 6, 3, 6, 2, 5, 9, 6, 6, 6, 4, 9, 8, 5, 8, 7, 6, 1, 8, 2, 2, 1, 2, 2, 5, 2, 2, 5, 5, 1, 2, 4, 8, 6, 7, 6, 4, 5, 3, 3}  ,
    {  6, 7, 7, 2, 0, 1, 8, 6, 9, 7, 1, 6, 9, 8, 5, 4, 4, 3, 1, 2, 4, 1, 9, 5, 7, 2, 4, 0, 9, 9, 1, 3, 9, 5, 9, 0, 0, 8, 9, 5, 2, 3, 1, 0, 0, 5, 8, 8, 2, 2}  ,
    {  9, 5, 5, 4, 8, 2, 5, 5, 3, 0, 0, 2, 6, 3, 5, 2, 0, 7, 8, 1, 5, 3, 2, 2, 9, 6, 7, 9, 6, 2, 4, 9, 4, 8, 1, 6, 4, 1, 9, 5, 3, 8, 6, 8, 2, 1, 8, 7, 7, 4}  ,
    {  7, 6, 0, 8, 5, 3, 2, 7, 1, 3, 2, 2, 8, 5, 7, 2, 3, 1, 1, 0, 4, 2, 4, 8, 0, 3, 4, 5, 6, 1, 2, 4, 8, 6, 7, 6, 9, 7, 0, 6, 4, 5, 0, 7, 9, 9, 5, 2, 3, 6}  ,
    {  3, 7, 7, 7, 4, 2, 4, 2, 5, 3, 5, 4, 1, 1, 2, 9, 1, 6, 8, 4, 2, 7, 6, 8, 6, 5, 5, 3, 8, 9, 2, 6, 2, 0, 5, 0, 2, 4, 9, 1, 0, 3, 2, 6, 5, 7, 2, 9, 6, 7}  ,
    {  2, 3, 7, 0, 1, 9, 1, 3, 2, 7, 5, 7, 2, 5, 6, 7, 5, 2, 8, 5, 6, 5, 3, 2, 4, 8, 2, 5, 8, 2, 6, 5, 4, 6, 3, 0, 9, 2, 2, 0, 7, 0, 5, 8, 5, 9, 6, 5, 2, 2}  ,
    {  2, 9, 7, 9, 8, 8, 6, 0, 2, 7, 2, 2, 5, 8, 3, 3, 1, 9, 1, 3, 1, 2, 6, 3, 7, 5, 1, 4, 7, 3, 4, 1, 9, 9, 4, 8, 8, 9, 5, 3, 4, 7, 6, 5, 7, 4, 5, 5, 0, 1}  ,
    {  1, 8, 4, 9, 5, 7, 0, 1, 4, 5, 4, 8, 7, 9, 2, 8, 8, 9, 8, 4, 8, 5, 6, 8, 2, 7, 7, 2, 6, 0, 7, 7, 7, 1, 3, 7, 2, 1, 4, 0, 3, 7, 9, 8, 8, 7, 9, 7, 1, 5}  ,
    {  3, 8, 2, 9, 8, 2, 0, 3, 7, 8, 3, 0, 3, 1, 4, 7, 3, 5, 2, 7, 7, 2, 1, 5, 8, 0, 3, 4, 8, 1, 4, 4, 5, 1, 3, 4, 9, 1, 3, 7, 3, 2, 2, 6, 6, 5, 1, 3, 8, 1}  ,
    {  3, 4, 8, 2, 9, 5, 4, 3, 8, 2, 9, 1, 9, 9, 9, 1, 8, 1, 8, 0, 2, 7, 8, 9, 1, 6, 5, 2, 2, 4, 3, 1, 0, 2, 7, 3, 9, 2, 2, 5, 1, 1, 2, 2, 8, 6, 9, 5, 3, 9}  ,
    {  4, 0, 9, 5, 7, 9, 5, 3, 0, 6, 6, 4, 0, 5, 2, 3, 2, 6, 3, 2, 5, 3, 8, 0, 4, 4, 1, 0, 0, 0, 5, 9, 6, 5, 4, 9, 3, 9, 1, 5, 9, 8, 7, 9, 5, 9, 3, 6, 3, 5}  ,
    {  2, 9, 7, 4, 6, 1, 5, 2, 1, 8, 5, 5, 0, 2, 3, 7, 1, 3, 0, 7, 6, 4, 2, 2, 5, 5, 1, 2, 1, 1, 8, 3, 6, 9, 3, 8, 0, 3, 5, 8, 0, 3, 8, 8, 5, 8, 4, 9, 0, 3}  ,
    {  4, 1, 6, 9, 8, 1, 1, 6, 2, 2, 2, 0, 7, 2, 9, 7, 7, 1, 8, 6, 1, 5, 8, 2, 3, 6, 6, 7, 8, 4, 2, 4, 6, 8, 9, 1, 5, 7, 9, 9, 3, 5, 3, 2, 9, 6, 1, 9, 2, 2}  ,
    {  6, 2, 4, 6, 7, 9, 5, 7, 1, 9, 4, 4, 0, 1, 2, 6, 9, 0, 4, 3, 8, 7, 7, 1, 0, 7, 2, 7, 5, 0, 4, 8, 1, 0, 2, 3, 9, 0, 8, 9, 5, 5, 2, 3, 5, 9, 7, 4, 5, 7}  ,
    {  2, 3, 1, 8, 9, 7, 0, 6, 7, 7, 2, 5, 4, 7, 9, 1, 5, 0, 6, 1, 5, 0, 5, 5, 0, 4, 9, 5, 3, 9, 2, 2, 9, 7, 9, 5, 3, 0, 9, 0, 1, 1, 2, 9, 9, 6, 7, 5, 1, 9}  ,
    {  8, 6, 1, 8, 8, 0, 8, 8, 2, 2, 5, 8, 7, 5, 3, 1, 4, 5, 2, 9, 5, 8, 4, 0, 9, 9, 2, 5, 1, 2, 0, 3, 8, 2, 9, 0, 0, 9, 4, 0, 7, 7, 7, 0, 7, 7, 5, 6, 7, 2}  ,
    {  1, 1, 3, 0, 6, 7, 3, 9, 7, 0, 8, 3, 0, 4, 7, 2, 4, 4, 8, 3, 8, 1, 6, 5, 3, 3, 8, 7, 3, 5, 0, 2, 3, 4, 0, 8, 4, 5, 6, 4, 7, 0, 5, 8, 0, 7, 7, 3, 0, 8}  ,
    {  8, 2, 9, 5, 9, 1, 7, 4, 7, 6, 7, 1, 4, 0, 3, 6, 3, 1, 9, 8, 0, 0, 8, 1, 8, 7, 1, 2, 9, 0, 1, 1, 8, 7, 5, 4, 9, 1, 3, 1, 0, 5, 4, 7, 1, 2, 6, 5, 8, 1}  ,
    {  9, 7, 6, 2, 3, 3, 3, 1, 0, 4, 4, 8, 1, 8, 3, 8, 6, 2, 6, 9, 5, 1, 5, 4, 5, 6, 3, 3, 4, 9, 2, 6, 3, 6, 6, 5, 7, 2, 8, 9, 7, 5, 6, 3, 4, 0, 0, 5, 0, 0}  ,
    {  4, 2, 8, 4, 6, 2, 8, 0, 1, 8, 3, 5, 1, 7, 0, 7, 0, 5, 2, 7, 8, 3, 1, 8, 3, 9, 4, 2, 5, 8, 8, 2, 1, 4, 5, 5, 2, 1, 2, 2, 7, 2, 5, 1, 2, 5, 0, 3, 2, 7}  ,
    {  5, 5, 1, 2, 1, 6, 0, 3, 5, 4, 6, 9, 8, 1, 2, 0, 0, 5, 8, 1, 7, 6, 2, 1, 6, 5, 2, 1, 2, 8, 2, 7, 6, 5, 2, 7, 5, 1, 6, 9, 1, 2, 9, 6, 8, 9, 7, 7, 8, 9}  ,
    {  3, 2, 2, 3, 8, 1, 9, 5, 7, 3, 4, 3, 2, 9, 3, 3, 9, 9, 4, 6, 4, 3, 7, 5, 0, 1, 9, 0, 7, 8, 3, 6, 9, 4, 5, 7, 6, 5, 8, 8, 3, 3, 5, 2, 3, 9, 9, 8, 8, 6}  ,
    {  7, 5, 5, 0, 6, 1, 6, 4, 9, 6, 5, 1, 8, 4, 7, 7, 5, 1, 8, 0, 7, 3, 8, 1, 6, 8, 8, 3, 7, 8, 6, 1, 0, 9, 1, 5, 2, 7, 3, 5, 7, 9, 2, 9, 7, 0, 1, 3, 3, 7}  ,
    {  6, 2, 1, 7, 7, 8, 4, 2, 7, 5, 2, 1, 9, 2, 6, 2, 3, 4, 0, 1, 9, 4, 2, 3, 9, 9, 6, 3, 9, 1, 6, 8, 0, 4, 4, 9, 8, 3, 9, 9, 3, 1, 7, 3, 3, 1, 2, 7, 3, 1}  ,
    {  3, 2, 9, 2, 4, 1, 8, 5, 7, 0, 7, 1, 4, 7, 3, 4, 9, 5, 6, 6, 9, 1, 6, 6, 7, 4, 6, 8, 7, 6, 3, 4, 6, 6, 0, 9, 1, 5, 0, 3, 5, 9, 1, 4, 6, 7, 7, 5, 0, 4}  ,
    {  9, 9, 5, 1, 8, 6, 7, 1, 4, 3, 0, 2, 3, 5, 2, 1, 9, 6, 2, 8, 8, 9, 4, 8, 9, 0, 1, 0, 2, 4, 2, 3, 3, 2, 5, 1, 1, 6, 9, 1, 3, 6, 1, 9, 6, 2, 6, 6, 2, 2}  ,
    {  7, 3, 2, 6, 7, 4, 6, 0, 8, 0, 0, 5, 9, 1, 5, 4, 7, 4, 7, 1, 8, 3, 0, 7, 9, 8, 3, 9, 2, 8, 6, 8, 5, 3, 5, 2, 0, 6, 9, 4, 6, 9, 4, 4, 5, 4, 0, 7, 2, 4}  ,
    {  7, 6, 8, 4, 1, 8, 2, 2, 5, 2, 4, 6, 7, 4, 4, 1, 7, 1, 6, 1, 5, 1, 4, 0, 3, 6, 4, 2, 7, 9, 8, 2, 2, 7, 3, 3, 4, 8, 0, 5, 5, 5, 5, 6, 2, 1, 4, 8, 1, 8}  ,
    {  9, 7, 1, 4, 2, 6, 1, 7, 9, 1, 0, 3, 4, 2, 5, 9, 8, 6, 4, 7, 2, 0, 4, 5, 1, 6, 8, 9, 3, 9, 8, 9, 4, 2, 2, 1, 7, 9, 8, 2, 6, 0, 8, 8, 0, 7, 6, 8, 5, 2}  ,
    {  8, 7, 7, 8, 3, 6, 4, 6, 1, 8, 2, 7, 9, 9, 3, 4, 6, 3, 1, 3, 7, 6, 7, 7, 5, 4, 3, 0, 7, 8, 0, 9, 3, 6, 3, 3, 3, 3, 0, 1, 8, 9, 8, 2, 6, 4, 2, 0, 9, 0}  ,
    {  1, 0, 8, 4, 8, 8, 0, 2, 5, 2, 1, 6, 7, 4, 6, 7, 0, 8, 8, 3, 2, 1, 5, 1, 2, 0, 1, 8, 5, 8, 8, 3, 5, 4, 3, 2, 2, 3, 8, 1, 2, 8, 7, 6, 9, 5, 2, 7, 8, 6}  ,
    {  7, 1, 3, 2, 9, 6, 1, 2, 4, 7, 4, 7, 8, 2, 4, 6, 4, 5, 3, 8, 6, 3, 6, 9, 9, 3, 0, 0, 9, 0, 4, 9, 3, 1, 0, 3, 6, 3, 6, 1, 9, 7, 6, 3, 8, 7, 8, 0, 3, 9}  ,
    {  6, 2, 1, 8, 4, 0, 7, 3, 5, 7, 2, 3, 9, 9, 7, 9, 4, 2, 2, 3, 4, 0, 6, 2, 3, 5, 3, 9, 3, 8, 0, 8, 3, 3, 9, 6, 5, 1, 3, 2, 7, 4, 0, 8, 0, 1, 1, 1, 1, 6}  ,
    {  6, 6, 6, 2, 7, 8, 9, 1, 9, 8, 1, 4, 8, 8, 0, 8, 7, 7, 9, 7, 9, 4, 1, 8, 7, 6, 8, 7, 6, 1, 4, 4, 2, 3, 0, 0, 3, 0, 9, 8, 4, 4, 9, 0, 8, 5, 1, 4, 1, 1}  ,
    {  6, 0, 6, 6, 1, 8, 2, 6, 2, 9, 3, 6, 8, 2, 8, 3, 6, 7, 6, 4, 7, 4, 4, 7, 7, 9, 2, 3, 9, 1, 8, 0, 3, 3, 5, 1, 1, 0, 9, 8, 9, 0, 6, 9, 7, 9, 0, 7, 1, 4}  ,
    {  8, 5, 7, 8, 6, 9, 4, 4, 0, 8, 9, 5, 5, 2, 9, 9, 0, 6, 5, 3, 6, 4, 0, 4, 4, 7, 4, 2, 5, 5, 7, 6, 0, 8, 3, 6, 5, 9, 9, 7, 6, 6, 4, 5, 7, 9, 5, 0, 9, 6}  ,
    {  6, 6, 0, 2, 4, 3, 9, 6, 4, 0, 9, 9, 0, 5, 3, 8, 9, 6, 0, 7, 1, 2, 0, 1, 9, 8, 2, 1, 9, 9, 7, 6, 0, 4, 7, 5, 9, 9, 4, 9, 0, 1, 9, 7, 2, 3, 0, 2, 9, 7}  ,
    {  6, 4, 9, 1, 3, 9, 8, 2, 6, 8, 0, 0, 3, 2, 9, 7, 3, 1, 5, 6, 0, 3, 7, 1, 2, 0, 0, 4, 1, 3, 7, 7, 9, 0, 3, 7, 8, 5, 5, 6, 6, 0, 8, 5, 0, 8, 9, 2, 5, 2}  ,
    {  1, 6, 7, 3, 0, 9, 3, 9, 3, 1, 9, 8, 7, 2, 7, 5, 0, 2, 7, 5, 4, 6, 8, 9, 0, 6, 9, 0, 3, 7, 0, 7, 5, 3, 9, 4, 1, 3, 0, 4, 2, 6, 5, 2, 3, 1, 5, 0, 1, 1}  ,
    {  9, 4, 8, 0, 9, 3, 7, 7, 2, 4, 5, 0, 4, 8, 7, 9, 5, 1, 5, 0, 9, 5, 4, 1, 0, 0, 9, 2, 1, 6, 4, 5, 8, 6, 3, 7, 5, 4, 7, 1, 0, 5, 9, 8, 4, 3, 6, 7, 9, 1}  ,
    {  7, 8, 6, 3, 9, 1, 6, 7, 0, 2, 1, 1, 8, 7, 4, 9, 2, 4, 3, 1, 9, 9, 5, 7, 0, 0, 6, 4, 1, 9, 1, 7, 9, 6, 9, 7, 7, 7, 5, 9, 9, 0, 2, 8, 3, 0, 0, 6, 9, 9}  ,
    {  1, 5, 3, 6, 8, 7, 1, 3, 7, 1, 1, 9, 3, 6, 6, 1, 4, 9, 5, 2, 8, 1, 1, 3, 0, 5, 8, 7, 6, 3, 8, 0, 2, 7, 8, 4, 1, 0, 7, 5, 4, 4, 4, 9, 7, 3, 3, 0, 7, 8}  ,
    {  4, 0, 7, 8, 9, 9, 2, 3, 1, 1, 5, 5, 3, 5, 5, 6, 2, 5, 6, 1, 1, 4, 2, 3, 2, 2, 4, 2, 3, 2, 5, 5, 0, 3, 3, 6, 8, 5, 4, 4, 2, 4, 8, 8, 9, 1, 7, 3, 5, 3}  ,
    {  4, 4, 8, 8, 9, 9, 1, 1, 5, 0, 1, 4, 4, 0, 6, 4, 8, 0, 2, 0, 3, 6, 9, 0, 6, 8, 0, 6, 3, 9, 6, 0, 6, 7, 2, 3, 2, 2, 1, 9, 3, 2, 0, 4, 1, 4, 9, 5, 3, 5}  ,
    {  4, 1, 5, 0, 3, 1, 2, 8, 8, 8, 0, 3, 3, 9, 5, 3, 6, 0, 5, 3, 2, 9, 9, 3, 4, 0, 3, 6, 8, 0, 0, 6, 9, 7, 7, 7, 1, 0, 6, 5, 0, 5, 6, 6, 6, 3, 1, 9, 5, 4}  ,
    {  8, 1, 2, 3, 4, 8, 8, 0, 6, 7, 3, 2, 1, 0, 1, 4, 6, 7, 3, 9, 0, 5, 8, 5, 6, 8, 5, 5, 7, 9, 3, 4, 5, 8, 1, 4, 0, 3, 6, 2, 7, 8, 2, 2, 7, 0, 3, 2, 8, 0}  ,
    {  8, 2, 6, 1, 6, 5, 7, 0, 7, 7, 3, 9, 4, 8, 3, 2, 7, 5, 9, 2, 2, 3, 2, 8, 4, 5, 9, 4, 1, 7, 0, 6, 5, 2, 5, 0, 9, 4, 5, 1, 2, 3, 2, 5, 2, 3, 0, 6, 0, 8}  ,
    {  2, 2, 9, 1, 8, 8, 0, 2, 0, 5, 8, 7, 7, 7, 3, 1, 9, 7, 1, 9, 8, 3, 9, 4, 5, 0, 1, 8, 0, 8, 8, 8, 0, 7, 2, 4, 2, 9, 6, 6, 1, 9, 8, 0, 8, 1, 1, 1, 9, 7}  ,
    {  7, 7, 1, 5, 8, 5, 4, 2, 5, 0, 2, 0, 1, 6, 5, 4, 5, 0, 9, 0, 4, 1, 3, 2, 4, 5, 8, 0, 9, 7, 8, 6, 8, 8, 2, 7, 7, 8, 9, 4, 8, 7, 2, 1, 8, 5, 9, 6, 1, 7}  ,
    {  7, 2, 1, 0, 7, 8, 3, 8, 4, 3, 5, 0, 6, 9, 1, 8, 6, 1, 5, 5, 4, 3, 5, 6, 6, 2, 8, 8, 4, 0, 6, 2, 2, 5, 7, 4, 7, 3, 6, 9, 2, 2, 8, 4, 5, 0, 9, 5, 1, 6}  ,
    {  2, 0, 8, 4, 9, 6, 0, 3, 9, 8, 0, 1, 3, 4, 0, 0, 1, 7, 2, 3, 9, 3, 0, 6, 7, 1, 6, 6, 6, 8, 2, 3, 5, 5, 5, 2, 4, 5, 2, 5, 2, 8, 0, 4, 6, 0, 9, 7, 2, 2} ,
    {  5, 3, 5, 0, 3, 5, 3, 4, 2, 2, 6, 4, 7, 2, 5, 2, 4, 2, 5, 0, 8, 7, 4, 0, 5, 4, 0, 7, 5, 5, 9, 1, 7, 8, 9, 7, 8, 1, 2, 6, 4, 3, 3, 0, 3, 3, 1, 6, 9, 0}
    };

    for (int y = 49; y >= 0; y --)
    {
        num = 0;
        for (int x = 0; x < 100; x ++)
        {
            num += digits[x][y];
        }

        carry[column] = num;
        column --;
    }

    for (column= 49; column >= 1; column --)
    {
        answer[row] = carry[column] % 10;
        carry[column] /= 10;
        carry[column-1] += carry[column];
        row--;
    }

    answer[row] = carry[0];

    cout<<"\nThe large sum is: ";

    for (row = 0; row <8; row++)
    {
        cout<<answer[row];
    }

    cout<<"\n";
}

void Project::longest_collatz_sequence() //problem 14

{
   const int UPPER_LIMIT = 1000000;
   long long nextSeqNum;
   int chainCount;
   int longChainStartNum;
   int longChainLength = 0;


     for (int n = 1; n <= UPPER_LIMIT; n++){
      chainCount = 1;
      nextSeqNum = n;

        while (nextSeqNum > 1){

         if ((nextSeqNum % 2) == 0){
            nextSeqNum = nextSeqNum / 2;
         }

         else {
            nextSeqNum = (3*nextSeqNum) + 1;
         }

         chainCount++;
      }


      if (chainCount > longChainLength){
         longChainLength = chainCount;
         longChainStartNum = n;
      }
   }

   cout<<"\nLongest Collatz Sequence is: "<<longChainStartNum<<endl;
}

void Project::diophantine_reciprocals_a() //problem 15

{
    seive(MAX);
	for (int N = 1000; N < MAX; N++)
	{
		if (!composite[N])
			continue;
		// Compute number of divsiors of N squared
		int numdiv = 1, cn = N;
		for (unsigned i = 0; 1 != cn && i < primes.size(); i++)
		{
			int	count = 0;
			while (cn % primes[i] == 0)
			{
				cn /= primes[i];
				count++;
			}
			numdiv *= (count * 2 + 1);
		}
		int ans = (numdiv + 1) / 2;
		if (ans > LIMIT)
		{
			cout << "\nThe Diophantine Reciprocals A is: "<<N << endl;
			break;
		}
	}
}

void Project::power_digit_sum() //problem 16
{
    vector<int> digits ;
    digits.push_back( 1 );
    for( int i=1; i<=1000; i++)
    {
        int carryover = 0;
        for ( vector<int>::iterator iter = digits.begin(); iter != digits.end(); iter++ )
        {
            *iter = *iter * 2 + carryover;
            if ( *iter > 9 && (iter+1) != digits.end() )
            {
                *iter -= 10;
                carryover = 1;
            }
            else if ( *iter > 9 && (iter+1) == digits.end())
            {
                *iter -= 10;
                digits.push_back(1);
                break;
            }
            else if ( *iter <= 9 )
                carryover = 0;
            }
        }
    int sum = 0;
    for ( vector<int>::iterator iter = digits.begin(); iter != digits.end(); iter++ )
        sum += *iter;
    cout<<"\nThe sum of the digits of the number 21000 is: "<<sum<<endl;
    cin.get();
}

void Project::number_letter_count() //problem 17
{
    int sum=0,n=0;

        for(int i=0;i<10001;i++)
        {
            n=i;
            /**Thousand**/
            if(n==1000)
            {
                sum=sum+11;
                n=1000;
            }

            /**Hundreds**/
            if(n>=100&&n<200)
            {
                sum=sum+10;
                if(n>100)
                    sum=sum+3;//one hundred and
                n=n-100;
            }
            else if(n>=200&&n<300)
            {
                sum=sum+10;
                if(n>200)
                    sum=sum+3; //two hundred and
                n=n-200;
            }
            else if(n>=300&&n<400)
            {
                sum=sum+12;
                if(n>300)
                    sum=sum+3; //three hundred and
                n=n-300;
            }
            else if(n>=400&&n<500)
            {
                sum=sum+11;
                if(n>400)
                    sum=sum+3; //four hundred and
                n=n-400;
            }
            else if(n>=500&&n<600)
            {
                sum=sum+11;
                if(n>500)
                    sum=sum+3; //five hundred and
                n=n-500;
            }
            else if(n>=600&&n<700)
            {
                sum=sum+10;
                if(n>600)
                    sum=sum+3; //six hundred and
                n=n-600;
            }
            else if(n>=700&&n<800)
            {
                sum=sum+12;
                if(n>700)
                    sum=sum+3; //seven hundred and
                n=n-700;
            }
            else if(n>=800&&n<900)
            {
                sum=sum+12;
                if(n>800)
                    sum=sum+3; //eight hundred and
                n=n-800;
            }
            else if(n>=900&&n<1000)
            {
                sum=sum+11;
                if(n>900)
                    sum=sum+3; //nine hundred and
                n=n-900;
            }


            /***Tens***/
            if(n>=20&&n<30)
            {
                sum=sum+6;
                n=n-20;
            }
            else if(n>=30&&n<40)
            {
                sum=sum+6;
                n=n-30;
            }
            else if(n>=40&&n<50)
            {
                sum=sum+5;
                n=n-40;
            }
            else if(n>=50&&n<60)
            {
                sum=sum+5;
                n=n-50;
            }
            else if(n>=60&&n<70)
            {
                sum=sum+5;
                n=n-60;
            }
            else if(n>=70&&n<80)
            {
                sum=sum+7;
                n=n-70;
            }
            else if(n>=80&&n<90)
            {
                sum=sum+6;
                n=n-80;
            }
            else if(n>=90&&n<100)
            {
                sum=sum+6;
                n=n-90;
            }

            /***Ones***/
            if(n==1||n==2||n==6||n==10)
                sum = sum+3;
            else if(n==4||n==5||n==9)
                sum = sum+4;
            else if(n==3||n==7||n==8)
                sum = sum+5;
            else if(n==11||n==12)
                sum = sum+6;
            else if(n==15||n==16)
                sum = sum+7;
            else if(n==13||n==14||n==18||n==19)
                sum = sum+8;
            else if(n==17)
                sum = sum+9;
        }
        cout<<"\nThe number letter counts is: "<<sum<<endl;
}

void Project::max_path_sum_one() //problem 18
{
    int j;
    int temp1[100];
    int array[]={04, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 04, 23,
                 63, 66, 04, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31,
                 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48,
                 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57,
                 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14,
                 41, 48, 72, 33, 47, 32, 37, 16, 94, 29,
                 41, 41, 26, 56, 83, 40, 80, 70, 33,
                 99, 65, 04, 28, 06, 16, 70, 92,
                 88, 02, 77, 73, 07, 63, 67,
                 19, 01, 23, 75, 03, 34,
                 20, 04, 82, 47, 65,
                 18, 35, 87, 10,
                 17, 47, 82,
                 95, 64,
                 75};

    for(j=0; j<14; j++)
    {
        if (array[j]>=array[j+1])
            temp1[j]=array[j]+array[j+15];
        else if (array[j]<=array[j+1])
            temp1[j]=array[j+1]+array[j+15];
    }

    for (j=0; j<13; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+29];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+29];
    }

    for (j=0; j<12; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+42];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+42];
    }

    for (j=0; j<11; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+54];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+54];
    }

    for (j=0; j<10; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+65];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+65];
    }

    for (j=0; j<9; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+75];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+75];
    }

    for (j=0; j<8; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+84];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+84];
    }

    for (j=0; j<7; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+92];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+92];
    }

    for (j=0; j<6; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+99];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+99];
    }

    for (j=0; j<5; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+105];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+105];
    }

    for (j=0; j<4; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+110];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+110];
    }

    for (j=0; j<3; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+114];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+114];
    }

    for (j=0; j<2; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+117];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+117];
    }

    for (j=0; j<1; j++)
    {
        if (temp1[j]>=temp1[j+1])
            temp1[j]=temp1[j]+array[j+119];
        else if (temp1[j]<=temp1[j+1])
            temp1[j]=temp1[j+1]+array[j+119];
        cout<<"\nMaximum path sum I is: "<<temp1[j]<<endl;
    }
}

void Project::counting_sundays() //problem 19
{
        const int carray[48] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
                          31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
                          31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    const vector<int> cycle(carray, carray + sizeof(carray) / sizeof(carray[0]));

    int count = 0, DM=0;
    int dow = 2;  // start on tuesday 1901.1.1
                // 2000 is a leap year too!
    for (int i = 0; i < 25; ++i)
        {
            for (vector<int>::const_iterator jt = cycle.begin();
            jt < cycle.end(); ++jt)
            {
                if (!dow)
                count++;
                dow = (dow + *jt) % 7;
            }
        }
    DM=(count);
    cout<<"\nThe number of Sundays fell on the first of the month"<<endl;
    cout<<"during the twentieth century is: "<<DM<<endl;
}

void Project::factorial_digit_sum() //problem 20
{
    string s = "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000";
    cout << "\nThe Factorial Digit Sum is: "<<sumDigits(s) << endl;
}

void Project::name_scores() //problem 21
{
    vector<string> names;
    ifstream namesFile("names.txt");

    char curChar;
    string curName = "";

    if(namesFile.is_open()) {
        while(!namesFile.eof()) {
            curChar = namesFile.get();

            if(isalpha(curChar))
                curName.push_back(curChar);
            else {
                if(!curName.empty()) {//store finished name
                    names.push_back(curName);
                    curName.clear();
                }
            }
        }
    }
    namesFile.close();

    sort(names.begin(), names.end());

    int total = 0;
    for(unsigned int i = 0; i < names.size(); i++)
        total += (getScore(names[i]) * (i+1));

    cout << "\nThe name score is: " << total << endl;
}

typedef long double BigNum;

int numDigits( BigNum num )
{
    int digits = 1;
    while ( num > 10.0 )
    {
        num *= 0.1f;
        ++digits;
    }
    return digits;
}

void Project::first_1000_digit_fibonacci() //problem 22
{
    BigNum a = 1;
    BigNum b = 1;
    int x = 2;
    int n = 0;

    while ( n < 1000 )
    {
        n = 1;
        BigNum fibbonacci = a + b;
        BigNum num = fibbonacci;
        while ( num > 10.0 )
        {
            num *= 0.1f;
            ++n;
        }
        a = b;
        b = fibbonacci;
        ++x;
    }

    cout << "\nThe first 1000 digit fibonacci number is: " << x<< endl;
}

bool p[sz];
long primeTable[78500],nPrime = 0;

void Project::sieve2()
{
 int i,j;

 p[0] = p[1] = true;
 for( i = 4; i <= sz; i += 2 )
  p[i] = true;

 primeTable[nPrime++] = 2;

 for( i = 3; i <= mx; i += 2 ){
  if(!p[i]){
   primeTable[nPrime++] = i;
   for( j = i * i; j <= sz; j += i )
    p[j] = true;
  }
 }

 for( i = mx + 2; i <= sz; i += 2 ){
  if(!p[i]){
   primeTable[nPrime++] = i;
  }
 }
}

bool isTruncatable(long n){
 long pow = 10;

 while( pow < n){
  if(p[n%pow] || p[n/pow])
   return false;
  pow *= 10;
 }
 return true;
}


void Project::truncable_primes() //problem 23
{
 long i,ans = 0;

 sieve2();

 for( i = 4; i < nPrime; i++)
    {
        if( isTruncatable(primeTable[i]) )
        {
            ans += primeTable[i];
        }
    }

 printf("\nSum of 11 truncatable primes is %ld\n",ans);
}
